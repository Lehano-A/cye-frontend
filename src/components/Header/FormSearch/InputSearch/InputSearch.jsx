import React, { useState, useCallback, useEffect } from "react";
import { Typography, Box, TextField, Autocomplete, ListItem } from "@mui/material";
import { useSelector, useDispatch } from "react-redux";
import { setInputValue, setSubmitting, setIsOpenedDropList, setApiFoundProductsForDropList, setGotResFromServer, setIsLoadingInDropList, setIsApiReqByCategory, setIsCursorInsideDropList } from "../../../../redux/reducers/inputSearchSlice";
import { styled } from "@mui/material/styles";
import api from "../../../../api/api";
import ClearIcon from '@mui/icons-material/Clear';
import IconButton from '@mui/material/IconButton';
import Loading from "../../../Loading/Loading";


const StyledTextField = styled(TextField)(() => {
  return {
    width: '100%',
    maxWidth: '600px',
    backgroundColor: '#fff',
    borderRadius: '4px',
  }
});

const styleMainBox = {
  display: 'flex',
  justifyContent: 'center',
  alignItems: 'center',
  minWidth: '250px',
  maxWidth: '600px',
  margin: '0 20px'
}

const styleImageBox = {
  width: '64px',
  marginRight: '5px',
  display: 'flex',
  alignItems: 'center'
}

const styleBrandAndCategoryBox = {
  display: 'flex',
  alignItems: 'center'
}

const styleBrandAndCategoryText = {
  marginRight: '18px',
  fontSize: '14px',
  color: '#9c9c9c',
  fontFamily: 'Comfortaa Variable',
  lineHeight: '14px'
}



function debounceInputChange(callback, delay) {
  let timeout

  return function (e, newValue) {
    clearTimeout(timeout)
    timeout = setTimeout(() => callback(e, newValue), delay)
  }
}


function InputSearch({ handleOnChange }) {
  const dispatch = useDispatch();

  const inputValue = useSelector(state => state.inputSearch.inputValue)
  const isSubmitting = useSelector(state => state.inputSearch.isSubmitting)
  const isOpenedDropList = useSelector(state => state.inputSearch.isOpenedDropList)
  const apiFoundProductsForDropList = useSelector(state => state.inputSearch.apiFoundProductsForDropList)
  const isLoadingInDropList = useSelector(state => state.inputSearch.isLoadingInDropList)
  const isCursorInsideDropList = useSelector(state => state.inputSearch.isCursorInsideDropList)

  const [value, setValue] = useState(null);

  const timeoutReqApiAfterInputChange = useCallback(debounceInputChange(reqApiInputChange, 300), [])


  useEffect(() => {
    if (inputValue.length === 0 && isOpenedDropList) {
      dispatch(setIsOpenedDropList(false))
    }

    if (inputValue.length >= 1 && !isOpenedDropList && !isSubmitting) {
      dispatch(setIsOpenedDropList(true))
    }
  }, [inputValue])



  // –∑–∞–ø—Ä–æ—Å –∫ api, –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫–µ –ø–æ–∏—Å–∫–∞
  function reqApiInputChange(event, newValue) {
    if (event.target.value !== '' && event.type === 'change') {
      dispatch(setGotResFromServer(false))

      api.findProductBySubstr({ substr: newValue }) // –ø–æ–∏—Å–∫ –ø–æ –ø–æ–¥—Å—Ç—Ä–æ–∫–µ
        .then((arrData) => {
          dispatch(setApiFoundProductsForDropList(arrData))
        })
        .catch(() => { new Error('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞') })
        .finally(() => { dispatch(setGotResFromServer(true)) })

      dispatch(setIsOpenedDropList(true))
    } else {
      dispatch(setIsOpenedDropList(false))
    }
  }


  // –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è (—Å —É—á—ë—Ç–æ–º debounce)
  function handleInputChange(e, newValue) {

    // –µ—Å–ª–∏ –∫—É—Ä—Å–æ—Ä –Ω–∞ –æ–ø—Ü–∏–∏ –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º –æ–∫–Ω–µ –∏ –Ω–∞–∂–∏–º–∞–µ—Ç—Å—è "Enter"
    // —Ç–æ–≥–¥–∞ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∏ –ø—Ä–µ—Ä—ã–≤–∞–µ–º—Å—è
    // –¥–∞–ª—å—à–µ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –≤ handleOnChange, –ø–æ—Å–∫–æ–ª—å–∫—É –ø—Ä–æ–∏–∑–æ—à–ª–æ –Ω–∞–∂–∞—Ç–∏–µ "Enter"
    if (e.type === 'keydown' && isCursorInsideDropList) {
      dispatch(setInputValue(inputValue))
      return
    }

    timeoutReqApiAfterInputChange(e, newValue)
    handleLoadingInDropList(true)
    dispatch(setInputValue(newValue))
    dispatch(setApiFoundProductsForDropList(null))
    dispatch(setIsApiReqByCategory(false))

    // –µ—Å–ª–∏ –±—ã–ª —Å–∞–±–º–∏—Ç (–æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–∞), —Ç–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫–µ –ø–æ–∏—Å–∫–∞, —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∞–±–º–∏—Ç–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è
    isSubmitting && dispatch(setSubmitting(false))
  }


  // –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ –æ–∫–Ω–∞
  function handleCloseDropList(e) {
    // –ï—Å–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    if (isLoadingInDropList) {
      e.target.focus()
      return
    }

    // –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞, –Ω–æ "—Ç–∞–∫–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–µ –Ω–∞—à–ª–æ—Å—å"
    if (apiFoundProductsForDropList?.length === 0) {
      return
    }

    dispatch(setIsOpenedDropList(false))
  }


  // –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—á–∏—â–µ–Ω–∏—è –ø–æ–ª—è –≤–≤–æ–¥–∞
  function handleClickClearButton() {
    dispatch(setInputValue(''))
    dispatch(setIsOpenedDropList(false))
    dispatch(setApiFoundProductsForDropList(null))
  }


  // –µ—Å–ª–∏ –±—ã–ª –≤–≤–æ–¥, –ø–æ—è–≤–∏–ª—Å—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º –æ–∫–Ω–µ, –∞ –ø–æ—Ç–æ–º –ø—Ä–æ–∏–∑–æ—à—ë–ª –∫–ª–∏–∫ –≤–Ω–µ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ –æ–∫–Ω–∞ (–æ–Ω–æ –∑–∞–∫—Ä—ã–ª–æ—Å—å), —Ç–æ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∫–ª–∏–∫–µ –≤ —Å—Ç—Ä–æ–∫—É –ø–æ–∏—Å–∫–∞, –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–Ω–æ–≤—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—Å—è
  function handleOpenDropListWithData(e) {
    if (e.type === 'mousedown') {
      if (inputValue?.length > 0 && !isOpenedDropList && apiFoundProductsForDropList?.length > 0) {
        dispatch(setIsOpenedDropList(true))
      }
    }
  }


  // –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç—ç–π—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º –æ–∫–Ω–µ
  function handleLoadingInDropList(state) {
    dispatch(setIsLoadingInDropList(state))
  }


  // –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ª–µ–∂–µ–Ω–∏—è –∑–∞ –∫—É—Ä—Å–æ—Ä–æ–º –º—ã—à–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ –æ–∫–Ω–∞
  // (–Ω—É–∂–Ω–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª—Å—è —Å–∞–±–º–∏—Ç, –µ—Å–ª–∏ –∫—É—Ä—Å–æ—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –æ–ø—Ü–∏–∏ –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ - –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ (–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º) –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –∑–∞–ø—Ä–æ—Å —Å –∑–Ω–∞—á–µ–Ω–∏–µ–º –∏–∑ –ø–æ–ª—è –≤–≤–æ–¥–∞)
  function handleMouseInsideListbox(e) {
    if (e.type === 'mouseenter') {
      dispatch(setIsCursorInsideDropList(true))
    }

    if (e.type === 'mouseleave') {
      dispatch(setIsCursorInsideDropList(false))
    }
  }


  return (
    <Box sx={styleMainBox}>
      <Autocomplete
        freeSolo
        loading
        blurOnSelect // —Å–±—Ä–æ—Å —Ñ–æ–∫—É—Å–∞, –ø–æ—Å–ª–µ —Å–∞–±–º–∏—Ç–∞ –∏–ª–∏ –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
        clearOnEscape
        disableClearable
        sx={{ width: 3500 }}
        forcePopupIcon={false}
        value={value} // —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–ø—Ü–∏–∏
        onChange={handleOnChange} // –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –æ–ø—Ü–∏–∏ –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
        inputValue={inputValue} // —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –≤–≤–æ–¥–∞
        onInputChange={handleInputChange} // –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ (—Å —É—á—ë—Ç–æ–º debounce)
        open={isOpenedDropList}
        onClose={handleCloseDropList}
        onOpen={handleOpenDropListWithData}
        loadingText={
          apiFoundProductsForDropList?.length === 0 ? <Typography>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–∞–∫–æ–π –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∞–π—Ç–∏ üòï</Typography>
            :
            <Box sx={{ display: 'flex', 'justifyContent': 'center' }}>
              <Loading handleLoading={handleLoadingInDropList} size={20} color='primary' />
            </Box>
        }
        options={apiFoundProductsForDropList === null ? [] : apiFoundProductsForDropList} // –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ –º–∞—Å—Å–∏–≤
        getOptionLabel={(option) => {
          return (
            option.brand ? option.brand :
              option.categories ? option.categories :
                option.title ? option.title : option
          )
        }} // –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫—É (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –¥–ª—è –∫–∞–∂–¥–æ–π –æ–ø—Ü–∏–∏ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ –æ–∫–Ω–∞)
        ListboxProps={
          {
            sx: { maxHeight: '100%' },
            onMouseEnter: (e) => { handleMouseInsideListbox(e) },
            onMouseLeave: (e) => { handleMouseInsideListbox(e) }
          }
        } // —Å–∞–º —ç–ª–µ–º–µ–Ω—Ç - "–≤—ã–ø–∞–¥–∞—é—â–µ–µ –æ–∫–Ω–æ"
        renderOption={(props, option) => {
          return (
            <ListItem {...props} sx={{ height: '64px' }}>

              {(option.brand || option.categories) && (
                <Box sx={styleBrandAndCategoryBox}>

                  <Typography sx={styleBrandAndCategoryText}>
                    {option.brand ? '–ë–†–ï–ù–î:' : '–ö–ê–¢–ï–ì–û–†–ò–Ø:'}
                  </Typography>

                  <Typography sx={{ fontWeight: 700 }}>
                    {option.brand ? option.brand : option.categories}
                  </Typography>

                </Box>
              )}

              {option.imagesUrl && (
                <>
                  <Box sx={styleImageBox}>
                    <img src={option.imagesUrl} alt="" />
                  </Box>
                  <Typography>{option.title}</Typography>
                </>

              )}

            </ListItem>
          )
        }} // –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –¥–ª—è –∫–∞–∂–¥–æ–π –æ–ø—Ü–∏–∏ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ –æ–∫–Ω–∞
        renderInput={(params) => (
          <StyledTextField
            {...params}
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –•—Ä—É—Ç–∫–∞"
            InputProps={{
              ...params.InputProps,
              endAdornment: (
                <>
                  {inputValue !== '' && (
                    <IconButton title="–û—á–∏—Å—Ç–∏—Ç—å" sx={{ marginRight: '5px' }} onClick={handleClickClearButton}>
                      <ClearIcon sx={{ fontSize: "18px" }} />
                    </IconButton>
                  )}
                  {params.InputProps.endAdornment}
                </>
              ),
            }}
          />
        )}
      />
    </Box>
  )
}


export default InputSearch;